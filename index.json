[{"categories":["Go"],"content":"获取光标在屏幕上的位置(坐标)","date":"2024-02-22","objectID":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/","tags":["fyne","robotgo","gohook"],"title":"获取光标的位置","uri":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/"},{"categories":["Go"],"content":"实现该功能，需要使用一个GUI库和 robotgo 的子项目 gohook。 该程序的核心是点击按钮进入阻塞状态，等待鼠标点击，点击之后获得对应位置的坐标 ","date":"2024-02-22","objectID":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/:0:0","tags":["fyne","robotgo","gohook"],"title":"获取光标的位置","uri":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/"},{"categories":["Go"],"content":"下载gohook go get github.com/robotn/gohook 注意：不要同时使用robotgo 和 gohook，robotgo 所使用的 gohook 是旧版本 ","date":"2024-02-22","objectID":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/:1:0","tags":["fyne","robotgo","gohook"],"title":"获取光标的位置","uri":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/"},{"categories":["Go"],"content":"编写GUI代码 我选择的GUI库是fyne 读取配置文件代码如下 // config.go package config import ( \"log\" \"os\" \"strings\" \"github.com/flopp/go-findfont\" \"github.com/spf13/viper\" ) func init() { // 读取配置文件 viper.SetConfigName(\"config\") viper.AddConfigPath(\".\") if err := viper.ReadInConfig(); err != nil { // 读取配置文件 log.Fatalf(\"Fatal error config file: %s \\n\", err) } //设置中文字体 fontPaths := findfont.List() for _, path := range fontPaths { if strings.Contains(path, \"msyh.ttf\") || strings.Contains(path, \"simchei.ttf\") || strings.Contains(path, \"simsun.ttc\") || strings.Contains(path, \"simkai.ttf\") { os.Setenv(\"FYNE_FONT\", path) break } } } 正文代码如下 // main.go package main import ( \"fmt\" \"log\" \"os\" _ \"pos/config\" \"fyne.io/fyne/v2/app\" \"fyne.io/fyne/v2/container\" \"fyne.io/fyne/v2/widget\" \"github.com/lxn/win\" hook \"github.com/robotn/gohook\" ) func main() { // 打开日志文件 file, err := os.OpenFile(\"cursor.log\", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666) if err != nil { log.Fatal(err) } // 创建logger consolelog := log.New(os.Stdout, \"[Debug]\", log.LstdFlags|log.Lshortfile) // 设置[Debug]日志输出到控制台 filelog := log.New(file, \"[Info]\", log.LstdFlags|log.Lshortfile) // 设置[Info]日志输出到文件,Info日志包含获取的坐标 a := app.New() // 创建Fyne程序 w := a.NewWindow(\"获取光标位置\") // 创建窗口 title := widget.NewLabel(\"点击获取坐标\") // 设置显示的文字 list1 := widget.NewLabel(\"1. 点击Click Me按钮\") list2 := widget.NewLabel(\"2. 在想要获取坐标的位置左击\") list3 := widget.NewLabel(\"3. 坐标会保存在log中\") var p win.POINT // 能不能点击按钮进入阻塞，等待鼠标点击呢，点击之后就能获得坐标了 btn := widget.NewButton(\"Click me\", func() { consolelog.Print(\"点击了按钮\") consolelog.Print(\"开始监听鼠标事件\") if ok := hook.AddEvent(\"mleft\"); ok { // 监听鼠标左键事件 consolelog.Print(\"监听鼠标左键事件成功\") if ok := win.GetCursorPos(\u0026p); !ok { // 获取鼠标位置 consolelog.Print(\"获取鼠标位置失败\") } filelog.Print(fmt.Sprintf(\"X=%d,Y=%d\", p.X, p.Y)) } }) textContainer := container.NewGridWithRows(4, title, list1, list2, list3) // 创建容器 w.SetContent(container.NewVBox(textContainer, btn)) // 设置界面内容 w.ShowAndRun() // 显示界面并运行 } ","date":"2024-02-22","objectID":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/:2:0","tags":["fyne","robotgo","gohook"],"title":"获取光标的位置","uri":"/%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E7%9A%84%E4%BD%8D%E7%BD%AE/"},{"categories":["Go语言"],"content":"slog日志使用记录","date":"2024-02-19","objectID":"/slog%E6%97%A5%E5%BF%97/","tags":["Go","Go标准库","Log库"],"title":"slog日志","uri":"/slog%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"slog日志是一个轻量级的日志库，使用简单，功能丰富，性能稳定。同时可以被log包所兼容。当使用log包时，可以使用slog包的Logger接口来替换log包的Logger接口。且会受到log包设置的影响。 ","date":"2024-02-19","objectID":"/slog%E6%97%A5%E5%BF%97/:0:0","tags":["Go","Go标准库","Log库"],"title":"slog日志","uri":"/slog%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"slog基本使用 slog是go的标准库包之一，与log包不同的是，slog设定了Info()、Debug()、Warn() 和 Error() 等输出不同级别日志的函数。同时还支持携带上下文信息：InfoContext()、DebugContext()、WarnContext() 和 ErrorContext() . func main() { slog.Info(\"slog msg\", \"greeting\", \"hello slog\") // 携带 context 上下文 slog.InfoContext(context.Background(), \"slog msg with context\", \"greeting\", \"hello slog\") } // 输出结果 2024/02/20 14:30:38 main.go:29: INFO slog msg greeting=\"hello slog\" 2024/02/20 14:30:38 main.go:31: INFO slog msg with context greeting=\"hello slog\" ","date":"2024-02-19","objectID":"/slog%E6%97%A5%E5%BF%97/:1:0","tags":["Go","Go标准库","Log库"],"title":"slog日志","uri":"/slog%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"Logger的创建 使用slog函数调用输出日志仅仅是普通的文本格式，如果需要 JSON 和 key=value 的形式需要在 slog.New() 函数中传入 slog.Handler 的实现。而slog包提供的实现有：Texthandler 和 JsonHandler ","date":"2024-02-19","objectID":"/slog%E6%97%A5%E5%BF%97/:2:0","tags":["Go","Go标准库","Log库"],"title":"slog日志","uri":"/slog%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"创建TextHandler处理器 TextHandler 是一个日志记录处理器，它将记录以一系列键值对的形式写入到一个 io.Writer 中。每个键值对都以 key=value 的形式表示，并且它们之间用空格分隔。 func main() { logger := slog.New(slog.NewTextHandler(os.Stderr, nil)) logger.Info(\"TextHandler\", \"name\", \"luigit\") } // 输出结果 time=2024-02-20T14:30:38.714+08:00 level=INFO msg=TextHandler name=luigit 在上述示例中，我们通过 slog.NewTextHandler 函数创建一个日志处理器，第一个参数 来决定输出到哪里，第二个参数 nil，然后将处理器作为参数，传递到 slog.New 函数里创建一个 Logger 实例，通过该实例可以执行日志输出的相关操作。 ","date":"2024-02-19","objectID":"/slog%E6%97%A5%E5%BF%97/:2:1","tags":["Go","Go标准库","Log库"],"title":"slog日志","uri":"/slog%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"创建JsonHandler处理器 JsonHandler 是一个日志记录处理器，它将记录以 json 的形式写入到一个 io.Writer 中。 func main() { jsonLogger := slog.New(slog.NewJSONHandler(os.Stdout, nil)) jsonLogger.Info(\"JSONHandler\", \"name\", \"luigit\") } // 输出结果 {\"time\":\"2024-02-20T14:45:24.832047+08:00\",\"level\":\"INFO\",\"msg\":\"JSONHandler\",\"name\":\"luigit\"} 不管是TextHandler还是JsonHandler，他们的调用方式都是一样的 参考文档 Go slog 包：开启结构化日志的奇妙之旅 ","date":"2024-02-19","objectID":"/slog%E6%97%A5%E5%BF%97/:2:2","tags":["Go","Go标准库","Log库"],"title":"slog日志","uri":"/slog%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"Log日志使用记录","date":"2024-02-19","objectID":"/log%E6%97%A5%E5%BF%97/","tags":["Go","Go标准库","Log库"],"title":"Log日志","uri":"/log%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"Go日志库的基本使用 package main import \"log\" func main() { log.Print(\"打印\") log.Printf(\"格式化: %s\", \"打印\") log.Println(\"打印并换行\") log.Fatal(\"打印并退出\") log.Fatalf(\"格式化: %s\", \"打印并退出\") log.Fatalln(\"打印换行并退出\") log.Panic(\"打印并终止运行时\") log.Panicf(\"格式化: %s\", \"打印并终止运行时\") log.Panicln(\"打印换行并终止运行时\") } log 包提供了 3 类共计 9 种方法来输出日志内容。 函数名 作用 使用示例 Print 打印日志 log.Print(“Print”) Printf 打印格式化日志 log.Printf(“Printf: %s”, “print”) Println 打印日志并换行 log.Println(“Println”) Panic 打印日志后执行 panic(s)（s 为日志内容） log.Panic(“Panic”) Panicf 打印格式化日志后执行 panic(s) log.Panicf(“Panicf: %s”, “panic”) Panicln 打印日志并换行后执行 panic(s) log.Panicln(“Panicln”) Fatal 打印日志后执行 os.Exit(1) log.Fatal(“Fatal”) Fatalf 打印格式化日志后执行 os.Exit(1) log.Fatalf(“Fatalf: %s”, “fatal”) Fatalln 打印日志并换行后执行 os.Exit(1) log.Panicln(“Panicln”) 实际上所有的函数都会换行，因为其内部调用了output方法，该方法定义了日志的结尾必须换行 ","date":"2024-02-19","objectID":"/log%E6%97%A5%E5%BF%97/:0:0","tags":["Go","Go标准库","Log库"],"title":"Log日志","uri":"/log%E6%97%A5%E5%BF%97/"},{"categories":["Go语言"],"content":"设置日志的格式 如果要对日志输出做一些定制，可以使用 log.New 创建一个自定义 logger package main import ( \"log\" \"os\" ) func main() { // log.New()的参数分别是 log.SetOutput(),log.SetFlags(),log.SetPrefix()三个函数的参数 logger := log.New(os.Stdout, \"[Debug] - \", log.Lshortfile) logger.Println(\"custom logger\") } // 输出结果为 [Debug] - main.go:22: custom logger log.New 函数接收三个参数，分别用来指定：==日志输出位置==（一个 io.Writer 对象）、==日志前缀==（字符串，每次打印日志都会跟随输出）、==日志属性==（定义好的常量，稍后会详细讲解）。 属性 说明 Ldate 当前时区的日期，格式：2009/01/23 Ltime 当前时区的时间，格式：01:23:23 Lmicroseconds 当前时区的时间，格式：01:23:23.123123，精确到微妙 Llongfile 全文件名和行号，格式：/a/b/c/d.go:23 Lshortfile 当前文件名和行号，格式：d.go:23，会覆盖 Llongfile LUTC 使用 UTC 而非本地时区，推荐日志全部使用 UTC 时间 Lmsgprefix 将 prefix 内容从行首移动到日志内容前面 LstdFlags 标准 logger 对象的初始值（等于： Ldate|Ltime） 前面说到，log.New()等同于log.SetOutput(),log.SetFlags(),log.SetPrefix()三个函数，因此可以分开设置日志的格式 log.SetPrefix(\"[Calculate] \") // 设置日志的前缀 log.SetFlags(log.LstdFlags | log.Lshortfile) // 设置日志的格式 log.SetOutput(os.Stdout) // 设置日志的输出位置 // 如果要将日志输出到文件，可以使用os.Create()创建一个文件，然后将文件作为参数传入log.SetOutput()函数中 使用建议 log 默认不支持 Debug、Info、Warn 等更细粒度级别的日志输出方法，不过我们可以通过创建多个 Logger 对象的方式来实现，只需要给每个 Logger 对象指定不同的日志前缀即可： loggerDebug = log.New(os.Stdout, \"[Debug]\", log.LstdFlags) loggerInfo = log.New(os.Stdout, \"[Info]\", log.LstdFlags) loggerWarn = log.New(os.Stdout, \"[Warn]\", log.LstdFlags) loggerError = log.New(os.Stdout, \"[Error]\", log.LstdFlags) 现在的slog日志支持Debug、Info、Warn、Error四个级别的日志输出 仅在 main.go 文件中使用 log.Panic、log.Fatal，下层程序遇到错误时先记录日志，然后将错误向上一层层抛出，直到调用栈顶层才决定要不要使用 log.Panic、log.Fatal。 log 包作为 Go 标准库，仅支持日志的基本功能，不支持记录结构化日志、日志切割、Hook 等高级功能，所以更适合小型项目使用，比如一个单文件的脚本。对于中大型项目，则推荐使用一些主流的第三方日志库，如 logrus、zap、glog 等。 参考文章 深入探究 Go log 标准库 ","date":"2024-02-19","objectID":"/log%E6%97%A5%E5%BF%97/:1:0","tags":["Go","Go标准库","Log库"],"title":"Log日志","uri":"/log%E6%97%A5%E5%BF%97/"},{"categories":["Linux"],"content":"Linux系统安装，准备为后续的Linux学习做准备","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["Linux"],"content":" 想要完整记录下来已经很久了，一直都是零零散散的，现在记录一下吧。 除非说明，我一般都是先说文字再配图 ","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/:0:0","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["Linux"],"content":"选择虚拟机 虚拟化程序大家也比较熟悉，基本上是VMware的VMware Workstation Pro和Oracle的VirtualBox两款软件 本记录中的虚拟化程序是VirtualBox，贴一下Oracle网站下VirtualBox的下载页面：VirtualBox下载 我也不会摆出VirtualBox的优势，因为我压根不知道。 从VMware换到VirtualBox的唯一原因是我感觉VMware占用系统资源高一些，而我的电脑性能比较差。 ","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/:1:0","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["Linux"],"content":"安装系统 到了选择系统安装系统的时候。 如果是个人使用，我建议选择Arch Linux，这里有着非常完善的Wiki供你参考，即使不认识英文也没关系，有中文。 如果是为了学习基础的使用或者为了工作使用，那还是选择一个服务器系统吧，比如RedHat(CentOS)、Rocky Linux或者Ubuntu以及其他。从我的使用上来说的话还是建议RedHat、CentOS、Rocky Linux入手。因为他们区别不大。 从上图也能了解一些RedHat、CentOS、Rocky Linux之间的关系。我所使用的便是Rocky Linux，同样的Rocky Linux也有文档可以看：Rocky Linux Documentation，不过中文的翻译并不多，目前只有安装系统和迁移数据是中文。 ","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/:2:0","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["Linux"],"content":"1.下载系统 系统的下载有两种方式，一是取官网下载，二是在镜像站下载，这里我选择的是官网，如果觉得下载速度慢可以选择阿里巴巴开源镜像站或其他镜像站下载 在下载页面可以看到兼容的RedHat版本和停止维护的时间 Minimal：最小化，没有常用软件包 DVD：完全，带有常用软件包，可以创建本地软件源 Boot：Live运行，没用过，不知道能不能安装，大概率不行 我的下载权重是Minimal\u003eDVD\u003eBoot，如果需要图形化界面直接选择DVD就好。 ","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/:2:1","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["Linux"],"content":"2. 设置虚拟机 下载完成之后来开始安装吧 点击新建，输入名称，选择安装的位置，选择下载好的ISO文件位置。VirtualBox会自动判断类型和版本，记得点击跳过自动安装 如果按照图形化界面记得将内存调整到至少4GB（4096MB）大小，处理器调整到2～4 虚拟硬盘的话至少50GB，如果不够在扩容，因为我是2TB机械所以我一般100GB起步 这里可以看可以不看，反正不能操作 点击完成之后就能看到创建的系统信息了，然后我们需要点击设置，再修改一下配置 关闭音频和USB设备 完成之后点击确定在点击启动，打开虚拟机。 ","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/:2:2","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["Linux"],"content":"3. 安装系统 选择第一项并回车 选择要使用的操作系有语言 点击时间和日期可以修改时区，中国的时区城市是上海 点击软件选择，在此处可以设置安装的软件主要是最小化安装、服务器常用软件、带图形化界面安装。因为此处使用的ISO文件是Minimal版本，所以只有最小化安装一项。 点击安装目的地，可以设置虚拟系统的分区信息 点击KDUMP。可以选择是否启用内核崩溃时的日志收集器，虚拟机没必要，如果时生产环境中就需要打开 ","date":"2024-02-18","objectID":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/:2:3","tags":["安装","Linux"],"title":"Linux记录：安装系统","uri":"/linux%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"categories":["MySQL"],"content":"Linux系统通过yum仓库安装MySQL","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":" 提示： 本次安装的是MySQL最新的版本 使用的系统为CentOS7 每个页面的链接在文档中都有，可以直接点击跳转 RPM安装太费劲了！ RPM不会帮你解决依赖问题，所以安装是有安装顺序的QAQ。 如果有想折腾的可以参考这篇文章：LinuxCentOs7下安装MySQL8.0.26详细教程，本人亲测可行，仅供大家避雷 零、首先要通过yum安装如下命令工具 wget命令行下载工具 vim编辑器，可选下载，Linux自带的vi可以替代 yum install -y wget vim 一、导入官方仓库 ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:0:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"1. 打开官网，进入下载界面 下载页面链接:https://dev.mysql.com/downloads/ 可以看到蓝色框内的是官方提供的Linux软件仓库。其中红色框内的是RedHat系Linux使用的包管理器yum的仓库。 ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:1:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"2. 点击MySQL Yum Repository进入官方仓库 yum库链接：MySQL Yum Repository 根据安装的系统版本点击相应的download即可。 ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:2:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"3. 复制链接 打开终端，执行以下命令 # 下载链接对应的文件，官方库的rpm文件 wget https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm # 安装下载的rpm文件 rpm -ivh mysql80-community-release-el7-5.noarch.rpm # 直接复制链接的后半部分即可 二、安装MySQL yum install -y mysql-community-server # 不知道直接写mysql会不会成功，后面我会尝试。 # 如果成功，将会修改此处的内容 三、配置MySQL ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:3:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"1.启动MySQL systemctl start mysqld # 如果是出现的下面一行，表示MySQL安装没有问题 Redirecting to /bin/systemctl start mysqld.service # 只有第一次启动会出现 相关命令，此部分内容可以跳过，只是对mysqld服务简单操作的罗列 # 查看MySQL服务运行状态 systemctl status mysqld # 启动MySQL systemctl start mysqld # 关闭MySQL systemctl stop mysqld # 重启MySQL systemctl restart mysqld ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:4:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"2.初次登录 ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:5:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"1. 获取MySQL随机生成的初始密码 grep 'temporary password' /var/log/mysqld.log 举例说明： # 密码在最后,每个人都是不同的 grep 'temporary password' /var/log/mysqld.log 2016-11-14T04:34:41.742516Z 1 [Note] A temporary password is generated for root@localhost: sNKz9yEdzw%/ 从执行结果来看 账户是root 主机名是localhost 初始密码是sNKz9yEdzw%/ ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:5:1","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"2. 修改密码 本处我采用的顺序 修改初始密码 修改配置文件 修改为简单密码 注意：顺序可以变换，比如先修改配置文件，再登录修改初始密码等 MySQL默认开启了validate_password插件，该插件要求密码至少包含一个大写字母，一个小写字母，一个数字和一个特殊字符，并且密码长度至少8个字符 1. 登录MySQL mysql -uroot -p # 输入上一步获取到的初始密码，进入MySQL 2. 修改密码 # 先将密码修改为Pw12345.可以在mysql终端中进行操作 ALTER user 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'Pw12345.'; 3. 查看当前的安全策略 show variables like 'varlidate%'; 当前生效的安全策略如下 4. 修改安全策略 修改安全策略有两种方式 直接在mysql终端中使用set进行修改 在my.cnf文件中修改。 直接在MySQL终端中使用set修改 # 修改密码策略等级为low set global validate_password.policy=low; # 密码的最小长度 set global validate_password.length=6; # 设置密码中至少要包含0个大小写字母 set global validate_password.mixed_case_count=0; # 设置密码中至少包含0个数字 set global validate_password.number_count=0; # 设置密码中至少包含0个特殊字符 set global validate_password.special_char_count=0; 在配置文件中修改密码策略 首先退出mysql终端 quit; 其次，使用shell编辑my.cnf文件 vim /etc/my.cnf # 打开后，输入i进入编辑模式 修改密码策略 validate_password.check_user_name=OFF # 是否能将密码设置成当前用户名 validate_password.length=4 # 密码的最小长度，也就是说密码长度必须大于或等于4 validate_password.mixed_case_count=0 # 密码必须包含的大写、小写字符数 validate_password.number_count=0 # 密码必须包含的数字个数 validate_password.policy=0 # 密码强度 0只检查长度 validate_password.special_char_count=0 # 密码必须包含的特殊字符个数 回到MySQL终端查看当前生效的安全策略 # 首先重启MySQL systemctl restart mysqld # 进入MySQL mysql -uroot -pPw12345. # 查看当前的安全策略 show variables like 'varlidate%'; 当前生效的安全策略如下 此时就可以设置简单密码1234了 5. 修改密码 ALTER USER 'root'@'localhost' IDENTIFIED BY '1234'; # 注意，此处的root是获取初始密码时得到的。同样localhost也是 ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:5:2","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"3. SQL客户端连接虚拟机 ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:6:0","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"1. 禁用firewall systemctl stop firewalld# 临时禁用(关闭，虚拟机重启后会启动) systemctl disable firewalld# 永久禁用(关闭开机自启动) ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:6:1","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"2. 进入MySQL操作，更新权限 use mysql;# 进入mysql数据库 select user,host from user;# 查看当前mysql的用户及权限 # 如果账户所对应的host不是'%',使用下面的命令更新 update user set host='%' where user='root'; FLUSH PRIVILEGES;# 刷新内容 完成上述内容后，使用sql客户端链接即可 总结 MySQL的在win/mac和Linux上的安装差距实在是大，差点疯掉 下载MySQL的官方库 导入官方库 下载MySQL 修改密码 连接物理机sqlyog 以上就是本内容的五个部分 警告：不知为何MySQL的安全插件validate_password消失，卸载后重新安装也没有加载成功。 另，修改密码的另一个方式就是直接卸载密码安全插件 方式如下： 卸载插件 UNINSTALL COMPONENT 'file://component_validate_password'; 安装插件 INSTALL COMPONENT 'file://component_validate_password'; ","date":"2024-02-18","objectID":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/:6:2","tags":["安装","Linux"],"title":"RedHat系Linux通过yum安装MySQL","uri":"/redhat%E7%B3%BBlinux%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"},{"categories":["MySQL"],"content":"RockyLinux通过module安装MySQL","date":"2024-02-17","objectID":"/rocky-install-mysql/","tags":["安装","Linux"],"title":"RockyLinux安装MySQL","uri":"/rocky-install-mysql/"},{"categories":["MySQL"],"content":" 本文接RedHat系Linux通过yum安装MySQL 新系统，新旅程 经朋友推荐，我接触了Rocky Linux，经过几天的使用，我将虚拟机和个人租的服务器的系统切换为了Rocky。 不得不说，Rocky Linux真的舒服，本人目前使用的是Rocky8.6。上一篇文章讲述了使用包管理器安装MySQL，本篇自然也会讲。 # 我是使用的普通用户，所以需要加sudo，root用户不需要使用sudo sudo dnf install -y @mysql # 截止到2022年11月，默认安装的是8.0.26的版本 想不到吧，就这一条，就能安装完成。下面再讲一下怎么设置。 ","date":"2024-02-17","objectID":"/rocky-install-mysql/:0:0","tags":["安装","Linux"],"title":"RockyLinux安装MySQL","uri":"/rocky-install-mysql/"},{"categories":["MySQL"],"content":"1. 启动服务 这个就不用说了吧？ sudo systemctl start mysqld # 启动服务 sudo systemctl enable mysqld # 开机启动服务 ","date":"2024-02-17","objectID":"/rocky-install-mysql/:1:0","tags":["安装","Linux"],"title":"RockyLinux安装MySQL","uri":"/rocky-install-mysql/"},{"categories":["MySQL"],"content":"2. 运行初始化脚本 sudo mysql_secure_installation 然后描述一下大致的流程，有点长，只关心有注释的地方就好 sudo mysql_secure_installation # 运行脚本 Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component? # 此处是询问是否设置验证密码组件，选择y/Y会启用validate_password Press y|Y for Yes, any other key for No: no # 输入一个非y或Y的字符。 Please set the password for root here. New password: # 输入MySQL的密码，我这里输入的是123456 Re-enter new password: # 再次输入MySQL的密码 By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. # 询问是否移除匿名用户 Remove anonymous users? (Press y|Y for Yes, any other key for No) : y # 从此处开始，后续都是y也是可以的 Success. Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. # 询问是否禁止远程登录MySQL Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y # 这里输入Y或no都是可以的，后面会处理，我这里是输入了y Success. By default, MySQL comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. # 询问是否移除test数据库 Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. # 询问是否重新加载权限表 Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y Success. All done! ","date":"2024-02-17","objectID":"/rocky-install-mysql/:2:0","tags":["安装","Linux"],"title":"RockyLinux安装MySQL","uri":"/rocky-install-mysql/"},{"categories":["MySQL"],"content":"3. 登陆MySQL mysql -uroot -p123456 # 进入数据库 mysql: [Warning] Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 10 Server version: 8.0.26 Source distribution Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e 此时已经进入了MySQL，我们只需要检查一下MySQL是否允许远程连接就可以了 use mysql;# 进入mysql数据库 select user,host from user;# 查看当前mysql的用户及权限 # 因为我上面在初始化脚本中选择的是不允许远程登录MySQL，所以我是需要修改权限的 update user set host='%' where user='root'; flush privileges;# 刷新权限表 警告！此时对于MySQL而言，主机名已经由localhost更改为% ","date":"2024-02-17","objectID":"/rocky-install-mysql/:3:0","tags":["安装","Linux"],"title":"RockyLinux安装MySQL","uri":"/rocky-install-mysql/"},{"categories":["MySQL"],"content":"题外话 Rocky Linux是无法使用ntp进行时间同步的哦，CentOS8同样也不支持，所以还在使用CentOS系统的小伙伴们，记得看一下Chrony时间同步。 Rocky Linux可以理解为是基于CentOS8做的，对于遇到的问题，可以直接看CentOS8的解决方案。 ","date":"2024-02-17","objectID":"/rocky-install-mysql/:4:0","tags":["安装","Linux"],"title":"RockyLinux安装MySQL","uri":"/rocky-install-mysql/"}]